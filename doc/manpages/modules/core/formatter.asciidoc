
SCRIPT(k)
=========

NAME
----
formatter - a

Options
-------

*autorestore_purge_restored* 'bool'::
	default 'true'
....
remove backups once they've been restored
....

*docsclient* 'str'::
	default 'null'
....
name of the client in which documentation is to be displayed
....

*termcmd* 'str'::
	default 'termite        -e'
....
shell command run to spawn a new terminal
A shell command is appended to the one set in this option at runtime
....

*ctagsfiles* 'str-list'::
	default 'tags'
....
colon separated list of paths to tag files to parse when looking up a symbol
....

*ctagsopts* 'str'::
	default '-R'
....
options to pass to the `ctags` shell command
....

*ctagspaths* 'str'::
	default '.'
....
path to the directory in which the tags file will be generated
....

*lintcmd* 'str'::
	default 'null'
....
shell command to which the path of a copy of the current buffer will be passed
The output returned by this command is expected to comply with the following format:
{filename}:{line}:{column}: {kind}: {message}
....

*autowrap_column* 'int'::
	default '80'
....
maximum amount of characters per line, after which a newline character will be inserted
....

*autowrap_format_paragraph* 'bool'::
	default 'no'
....
when enabled, paragraph formatting will reformat the whole paragraph in which characters are being inserted
This can potentially break formatting of documents containing markup (e.g. markdown)
....

*autowrap_fmtcmd* 'str'::
	default 'fold -s -w %c'
....
command to which the paragraphs to wrap will be passed
all occurences of '%c' are replaced with `autowrap_column`
....

*c_include_guard_style* 'str'::
	default 'ifdef'
....
control the type of include guard to be inserted in empty headers
Can be one of the following:
ifdef: old style ifndef/define guard
pragma: newer type of guard using "pragma once"
....

*alt_dirs* 'str-list'::
	default '.:..'
....
semi-colon separated list of path in which header files will be looked for
....

*makecmd* 'str'::
	default 'make'
....
shell command run to build the project
....

*make_error_pattern* 'str'::
	default '(?:fatal )?error:'
....
pattern that describes lines containing information about errors in the output of the `makecmd` command
....

*toolsclient* 'str'::
	default 'null'
....
name of the client in which utilities display information
....

*jumpclient* 'str'::
	default 'null'
....
name of the client in which all source code jumps will be executed
....

*grepcmd* 'str'::
	default 'grep -RHn'
....
shell command run to search for subtext in a file/directory
....

*comment_line* 'str'::
	default '#'
....
characters inserted at the beginning of a commented line
....

*comment_block* 'str-list'::
	default 'null'
....
colon separated tuple containing the characters inserted before/after a commented line
....

*formatcmd* 'str'::
	default 'null'
....
shell command to which the contents of the current buffer is piped
....

Commands
--------

*tmux-repl-window*::
....
Create a new window for repl interaction
....

*autorestore-restore-buffer*::
....
Restore the backup for the current file if it exists
....

*autorestore-purge-backups*::
....
Remove all the backups of the current buffer
....

*autorestore-disable*::
....
Disable automatic backup recovering
....

*git*::
....
git [<arguments>]: git wrapping helper
All the optional arguments are forwarded to the git utility
Available commands:
-add
-rm
-blame
-commit
-checkout
-diff
-hide-blame
-log
-show
-show-diff
-status
-update-diff
....

*go-complete*::
....
Complete the current selection with gocode
....

*go-enable-autocomplete*::
....
Add gocode completion candidates to the completer
....

*go-disable-autocomplete*::
....
Disable gocode completion
....

*go-format*::
....
go-format [-use-goimports]: custom formatter for go files
....

*go-doc-info*::
....
Show the documention of the symbol under the cursor
....

*go-print-signature*::
....
Print the signature of the symbol under the cursor
....

*go-jump*::
....
Jump to the symbol definition
....

*go-share-selection*::
....
Share the selection using the Go Playground
....

*racer-complete*::
....
Complete the current selection with racer
....

*racer-enable-autocomplete*::
....
Add racer completion candidates to the completer
....

*racer-disable-autocomplete*::
....
Disable racer completion
....

*ruby-alternative-file*::
....
Jump to the alternate file (implementation ↔ test)
....

*x11-new*::
....
x11-new [<command>]: create a new kak client for the current session
The optional arguments will be passed as arguments to the new client
....

*x11-focus*::
....
x11-focus [<client>]: focus a given client's window
If no client is passed, then the current client is used
....

*tag*::
....
tag [<symbol>]: jump to a symbol's definition
If no symbol is passed then the current selection is used as symbol name
....

*tag-complete*::
....
Insert completion candidates for the current selection into the buffer's local variables
....

*ctags-funcinfo*::
....
Display ctags information about a selected function
....

*ctags-enable-autoinfo*::
....
Automatically display ctags information about function
....

*ctags-disable-autoinfo*::
....
Disable automatic ctags information displaying
....

*ctags-generate*::
....
Generate tag file asynchronously
....

*update-tags*::
....
Update tags for the given file
....

*tmux-new-vertical*::
....
Create a new vertical pane
....

*tmux-new-horizontal*::
....
Create a new horizontal pane
....

*tmux-new-window*::
....
Create a new window
....

*tmux-focus*::
....
tmux-focus [<client>]: focus the given client
If no client is passed then the current one is used
....

*spell*::
....
spell [<language>]: spell check the current buffer
The first optional argument is the language against which the check will be performed
Formats of language supported:
- ISO language code, e.g. 'en'
- language code above followed by a dash or underscore with an ISO country code, e.g. 'en-US'
....

*spell-next*::
....
null
....

*spell-replace*::
....
null
....

*lint*::
....
Parse the current buffer with a linter
....

*lint-enable*::
....
Activate automatic diagnostics of the code
....

*lint-disable*::
....
Disable automatic diagnostics of the code
....

*lint-next*::
....
Jump to the next line that contains an error
....

*lint-prev*::
....
Jump to the previous line that contains an error
....

*autowrap-enable*::
....
Automatically wrap the lines in which characters are inserted
....

*autowrap-disable*::
....
Disable automatic line wrapping
....

*lua-alternative-file*::
....
Jump to the alternate file (implementation ↔ test)
....

*c-family-alternative-file*::
....
Jump to the alternate file (header/implementation)
....

*doc*::
....
doc <topic> [<keyword>]: open a buffer containing documentation about a given topic
An optional keyword argument can be passed to the function, which will be automatically selected in the documentation
....

*doc-module*::
....
doc-module <topic> [<keyword>]: open a buffer containing documentation about a default module
An optional keyword argument can be passed to the function, which will be automatically selected in the documentation
....

*make*::
....
make [<arguments>]: make utility wrapper
All the optional arguments are forwarded to the make utility
....

*make-next*::
....
Jump to the next make error
....

*make-prev*::
....
Jump to the previous make error
....

*man*::
....
man [<page>]: manpage viewer wrapper
If no argument is passed to the command, the selection will be used as page
The page can be a word, or a word directly followed by a section number between parenthesis, e.g. kak(1)
....

*grep*::
....
grep [<arguments>]: grep utility wrapper
All the optional arguments are forwarded to the grep utility
....

*grep-next*::
....
Jump to the next grep match
....

*grep-prev*::
....
Jump to the previous grep match
....

*comment-block*::
....
(un)comment selected lines using block comments
....

*comment-line*::
....
(un)comment selected lines using line comments
....

*format*::
....
Format the contents of the current buffer
....
