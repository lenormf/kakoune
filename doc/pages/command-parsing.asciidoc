= Command Parsing

Kakoune commands, either loaded from a script, or written in the command
prompt are parsed according to the following rules:

== Basic Parsing

- Commands are separated by `;` or new line characters.

- Words (command names and parameters) are separated by whitespace characters.

== Quoted Strings

If a word starts with `'`, `"` or `%X`, with `X` being a non nestable
punctuation character, then it is parsed as a quoted string whose delimiter
is, respectively, `'`, `"` or `X`.

A quoted string contains every character (including whitespace) up to
its closing delimiter. If the closing delimiter is doubled, then it is
considered to be part of the string content as a single character.

No other escaping takes place in quoted strings.

=== Quoted Strings Examples

- `'foo'` is a string whose content is *foo*.

- `'foo''bar'` is a single word whose content is *foo'bar*.

- `"baz"""` is a single word whose content is *baz"*.

== Symmetrical Strings

If a word starts with `%X`, with `X` being a nestable punctuation character
(one of `(`, `[`, `{` or `<`), then it is parsed as a symmetrical string
whose closing delimiter is the character matching its opening delimiter
(respectively `)`, `]`, `}` and `>`).

A symmetrical string contains every character (including whitespace)
until a closing delimiter is found; opening and closing delimiters are
symmetrical within the string (each opening delimiter appearing within the
string has been closed by a matching closing delimiter).

No other type of escaping takes place in symmetrical strings.

=== Symmetrical Strings Examples

- `%{foo}` is string whose content is *foo*.

- `%{foo\{bar}}` is a string whose content is *foo\{bar}*.

== Unquoted Words

Other words are unquoted. Unquoted words end either with a whitespace
character or `;`.

If they start with `\\` followed by `%`, `'` or `"`, then that leading
`\\` character is discarded.

If a whitespace character or `;` is preceded by `\\`, then the `\\` character
is discarded and the whitespace character or `;` becomes part of the
word. Any other `\\` is treated as a literal `\\`.

== Typed Expansions

Quoted and symmetrical strings starting with `%` may have an optional
alphabetic _expansion type_ between the `%` character and their delimiter
(which is always a punctuation character). This _expansion type_ defines
how the string content is going to be expanded.

- If the _expansion type_ is empty, the string content is used verbatim.

- If the _expansion type_ is one of `sh`, `reg`, `opt`, `val` or `arg`,
  the string is expanded as described in <<expansions#typed-expansions,`:doc expansion typed-expansions`>>

- For any other _expansion type_ a parsing error is raised.
