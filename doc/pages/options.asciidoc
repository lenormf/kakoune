= Options

== Description

Kakoune can store named and typed values that can be used both to
customize the core editor behaviour, and to store data used by extension
scripts.

[[set-option]]
Options can be modified using the `set-option` command:

--------------------------------------------
set-option [-add] <scope> <name> <values>...
--------------------------------------------

*scope* can be one of *global*, *buffer*, *window* or *current* (see
<<scopes#,`:doc scopes`>>). *current* relates to the narrowest scope in
which the option is already set.

Multiple *values* can be given as separate arguments when the option is a
list or map.

If `-add` is specified, the new value is *added* to the current one
instead of replacing it (the exact outcome depends on the type, see below).

[[unset-option]]
Options values can be unset in a specific scope with the `unset-option`
command:

---------------------------
unset-option <scope> <name>
---------------------------

Unsetting an option will make it fallback to the value of its parent mode,
hence options cannot be unset from the *global* scope.

[[declare-option]]
New options can be declared using the `declare-option` command:

---------------------------------------------------
declare-option [-hidden] <type> <name> [<value>...]
---------------------------------------------------

If `-hidden` is specified, the option will not be displayed in completion
suggestions.

[[update-option]]
Certain option type can be *updated*, usually to match potential changes
in the buffer they relate to. This can be triggered by the `update-option`
command:

----------------------------
update-option <scope> <name>
----------------------------

== Types

All options have a type, which defines how they are translated to/from
text and their set of valid values.

Some types are usable for user defined options while some other types
are exclusively available to built-in options.

*bool*::
    boolean value, can be one of `yes`, `true` or `no`, `false`.

*int*::
    integer number.
    `set -add` performs an arithmetic addition.

*str*::
    sequence of characters.

*regex*::
    similar to regular strings, with lexical checks that make sure the
    regular expression is valid.

*completions*::
    list of completion candidates. The first element defines where the
    word being completed upon is in the buffer, and has the following format:

    `<line>.<column>[+<length>]@<timestamp>`

    Subsequent items are the candidates themselves:

    `<markup text>|<docstring>|<menu text>`

    `set -add` appends a new completion candidate to the list.

*line-specs*::
    list of _line flags_. The first element is the timestamp of the buffer,
    and the following items are the flags themselves:

    `<line number>|<flag text>`

    When a *line-specs* option is passed to command `update-option`,
    its line numbers are updated according to all the buffer
    modifications that happened since the given timestamp
    (see <<highlighters#specs-highlighters,`:doc highlighters
    specs-highlighters`>>).

    `set -add` appends a new _line flag_ to the list.

*range-specs*::
    list of coordinate ranges with text. The first element is the timestamp
    of the buffer, and the following items are the ranges themselves:

    `<range>|<text>`

    Each *range* supports either of the following formats:

    `<begin line>.<begin column>,<end line>.<end column>` +
    `<begin line>.<begin column>+<length>`

    When a *range-specs* option is passed to command `update-option`,
    its coordinates are updated according to all the buffer
    modifications that happened since the given timestamp
    (see <<highlighters#specs-highlighters,`:doc highlighters
    specs-highlighters`>>)

    `set -add` appends the new coordinate range to the list.

*<type>-list*::
    list, where *type* can be one of `int`, `str`.

    `set -add` appends a new element of the same *type* to the list.

*<type>-to-<type>-map*::
    list of `key=value` pairs, where *type* is `str`.

    `set -add` adds the new pair to the hashmap if no such element with
    the given *key* exists, or replaces it otherwise.

*coord*::
    comma separated line, column pair (`<line>,<column>`).
    Cannot be used with `declare-option`.

*enum(value1|value2|...)*::
    enumeration whose value is one of several pre-defined ones.
    Cannot be used with `declare-option`.

*flags(value1|value2|...)*::
    set whose value is a combination of several pre-defined values, separated
    by a `|` character.
    `set -add` appends the new flag to the combination.
    Cannot be used with `declare-option`.

== Builtin options

*aligntab* `bool`::
    _default_ false +
    use tabs instead of spaces for when indentation is being performed by
    alignment primitives (e.g. `&`).

*auto_complete* `flags(insert|prompt)`::
    _default_ insert|prompt +
    display completions candidates in the given modes.

*autoinfo* `flags(command|onkey|normal)`::
    _default_ command|onkey +
    display the information box in the given modes.

*autoreload* `enum(yes|no|ask)`::
    _default_ ask +
    automatically reload open buffers when an external modification was
    detected.

*BOM* `enum(none|utf8)`::
    _default_ none +
    define if the file should be written with a unicode byte order mark;
    values of this option assigned within the `window` scope are ignored.

*completers* `completer-list`::
    _default_ filename word=all +
    completion engines to use when triggering completiong in insert mode. They
    are executed in order until one returns a candidate.

    The completers available and the data they pick candidates out of are
    as follows:

    *filename*:::
        candidates based on the local filesystem (filenames, directory
        names etc)

    *line*:::
        candidates are lines from the current buffer

    *word=all*, *word=buffer*:::
        candidates are words from all open buffers (*word=all*), or only
        the current one (*word=buffer*)

    *option=<opt-name>*:::
        candidates are stored in option *opt-name* of type `completions`

*debug* `flags(hooks|shell|profile|keys|commands)`::
    dump various debug information in the '\*debug*' buffer.

*disabled_hooks* `regex`::
    hooks whose group name match *regex* won't be executed. For
    example, indentation hooks can be disabled with `.*-indent` (see
    <<hooks#disabling-hooks,`:doc hooks`>>).

*eolformat* `enum(lf|crlf)`::
    _default_ lf +
    the format of end of lines when writing a buffer, this is autodetected
    on load; values of this option assigned to the `window` scope are
    ignored.

*extra_word_chars* `codepoint-list`::
    list of all additional codepoints that should be considered as 'word'
    character.

*filetype* `str`::
    arbitrary string defining the type of the file, commonly used by scripts
    to enable/disable features with hooks (see <<hooks#default-hooks,`:doc
    hooks default-hooks`>>).

*fs_checkout_timeout* `int`::
    _default_ 500 +
    timeout, in milliseconds, between checks in normal mode of modifications
    of the file associated with the current buffer on the filesystem.

*idle_timeout* `int`::
    _default_ 50 +
    timeout, in milliseconds, with no user input that will trigger the
    *PromptIdle*, *InsertIdle* and *NormalIdle* hooks, and autocompletion.

*ignored_files* `regex`::
    filenames matching *regex* won't be considered candidates for filename
    completion, except if the text being completed already matches it.

*incsearch* `bool`::
    _default_ true +
    highlight buffer contents that would match the current search pattern
    if it were validated.

*indentwidth* `int`::
    _default_ 4 +
    width (in spaces) used for indentation, 0 means a tab character.

*matching_pairs* `codepoint-list`::
    _default_ ( ) { } [ ] < > +
    list of codepoints that are to be treated as matching pairs by the
    `m` primitive.

*modelinefmt* `string`::
    _default_ `%val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]` +
    format string used to generate the mode line. It is first expanded as
    a command line would be (expanding `%...{...}` strings), then markup
    tags are applied (see <<expansions#,`:doc expansions`>>).

    Two special atoms are available as markup:

        *`{{context_info}}`*:::
            information such as `[+][recording (@)][no-hooks][new file][fifo]`,
            in face `Information`

        *`{{mode_info}}`*:::
            information about the current mode, such as `insert 3 sel` or
            `prompt`. The faces used are `StatusLineMode`, `StatusLineInfo`,
            and `StatusLineValue`

*path* `str-list`::
    _default_ ./ %/ /usr/include +
    directories the the `gf` primitive and filename completion engine
    search through to return candidates.
    `%/` expands to the current buffer's directory.

*readonly* `bool`::
    _default_ false +
    prevent modifications from being saved to disk, all buffers if set
    to `true` in the `global` scope, or current buffer if set in the
    `buffer` scope; values of this option assigned to the `window`
    scope are ignored.

*scrolloff* `coord`::
    _default_ 0,0 +
    number of lines, columns to keep visible around the cursor when scrolling.

*static_words* `str-list`::
    list of words that are always added to completion candidates when
    completing words in insert mode.

[[startup-info]]
*startup_info_version* `int`::
    _default_ 0 +
    Controls which messages will be displayed in the startup info box, only
    messages relating to a Kakoune version greater than this value will
    be displayed. Versions are written as a single number, e.g. `20180413`
    for version `2018.04.13`.

*tabstop* `int`::
    _default_ 8 +
    width of a tab character.

*ui_options* `str-to-str-map`::
    a list of `key=value` pairs that are forwarded to the user
    interface implementation. The NCurses UI support the following options:

        *ncurses_assistant*:::
            _default_ clippy +
            specify the nice assistant displayed in info boxes, can be one
            of *clippy*, *cat*, *dilbert* or *none*

        *ncurses_change_colors*:::
            _default_ true +
            boolean option that can disable color palette changing if the
            terminfo enables it but the terminal does not support it.

        *ncurses_enable_mouse*:::
            _default_ false +
            boolean option that enables mouse support

        *ncurses_set_title*:::
            _default_ true +
            if *yes* or *true*, the terminal emulator title will
            be changed

        *ncurses_shift_function_key*:::
            _default_ 12 +
            Function key from which shifted function key start, if the
            terminal sends F13 for <s-F1>, this should be set to 12.

        *ncurses_status_on_top*:::
            _default_ false +
            if *yes*, or *true* the status line will be placed
            at the top of the terminal rather than at the bottom

        *ncurses_wheel_up_button*, *ncurses_wheel_down_button*:::
            _default_ 4, 5 +
            specify which button number to send on wheel up/down events
