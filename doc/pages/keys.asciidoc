= Keys

== Key Syntax

Regular keys are written using their ASCII character, including capital
keys. Non printable keys use an alternate name, enclosed
between *<* and *>*, such as *<esc>* or *<del>*.

Modifiers can be prepended to the keys, and can be one of the following:

    *c*::
        control modifier

    *a*::
        alt modifier

    *s*::
        shift modifier

Modifiers and keys are comma separated (*-*) and enclosed in
brackets (*<*, *>*) like other keys, e.g. *<c-x>*, *<a-space>*, *<c-a-w>*.

*<s-x>*, *<s-X>* and *<X>* are treated as the same key. The *s-* modifier
only works with ASCII letters and cannot be used with other printable keys
(non-ASCII letters, digits, punctuation) because their shift behaviour
depends on your keyboard layout. The *s-* modifier _can_ be used with
special keys like *<up>* and *<tab>*.

In order to bind some keys to arbitrary ones, see <<mapping#,`:doc mapping`>>.

== Insert mode

*<esc>*::
    leave insert mode.

*<backspace>*::
    delete characters before the cursor.

*<del>*::
    delete characters under the cursor.

*<left>*, *<right>*, *<up>*, *<down>*::
    move the cursor in the given direction.

*<home>*::
    move the cursor to the beginning of the line.

*<end>*::
    move the cursor to the end of the line.

*<c-r>*::
    insert the contents of the register given by next key hit.

*<c-v>*::
    insert the next keystroke directly into the buffer, without interpreting
    it.

*<c-u>*::
    commit changes up to now as a single undo group.

*<a-;>*::
    escape to normal mode to allow for a single command to be executed with
    `:`.

== Insert mode completion

The `completers` option controls automatic completion, which is triggered when
the value specified in the `idle_timeout` option is reached.

*<c-o>*::
    toggle automatic completion.

*<c-n>*::
    select the next completion candidate.

*<c-p>*::
    select the previous completion candidate.

*<c-x>*::
    explicit insert completion query, followed by:

    *f*:::
        file completion

    *w*:::
        word completion (current buffer)

    *W*:::
        word completion (all buffers)

    *l*:::
        line completion (current buffer)

    *L*:::
        line completion (all buffers)

== Using Counts

In normal mode, some primitives can be prefixed with a numeric _count_,
which can affect its behaviour. With most primitives whose side effect is
quantifiable, the _count_ will simply repeat the same action a given amount
of times.

For example, `3W` selects 3 'WORD's consecutively, while `3w` selects the
third 'word' located after the right-most boundary of each selection.

== Disabling Hooks

Any normal mode primitive can be prefixed with `\` in order to disable hook
execution for as long as the new mode entered into is enabled.

As autoindentation is implemented with hooks, this mechanism can be used
to disable it when pasting text.

== Movement

'word' is a sequence of alphanumeric characters or underscore, and 'WORD'
is a sequence of non whitespace characters. Generally, a movement on its own
will move each selection to cover the text moved over, while holding down
the Shift modifier and moving will extend each selection instead.

*h*, *<left>*::
    select the character on the left of the end of each selection.

*j*, *<down>*::
    select the character below the end of each selection.

*k*, *<up>*::
    select the character above the end of each selection.

*l*, *<right>*::
    select the character on the right of the end of each selection.

*w*::
    select the word and following whitespace characters on the right of the end of each selection.

*b*::
    select the preceding whitespace characters and the word on the left of the end of each selection.

*e*::
    select the preceding whitespace characters and the word on the right of the end of each selection.

*<a-[wbe]>*::
    same as *[wbe]* but select 'WORD' instead of 'word'.

*f* `character`::
    select up to the next occurrence of *character*.

*t* `character`::
    select up to the character preceding the next occurrence of *character*.

*<a-[ft]>*::
    same as *[ft]* but backwards.

*<a-.>*::
    repeat last object or *f*/*t* selection command.

*m*::
    select up to delimiter matching the character under the cursor, see the
    `matching_pairs` option in <<options#,`:doc options`>>.

*x*::
    select the line on which the end of each selection lies, or the next
    line when its end lies on a newline character.

*<a-x>*::
    expand the current selections to contain full lines (including newline
    characters).

*<a-X>*::
    trim the current selections to only contain full lines (not including
    the last newline character).

*%*::
    select whole buffer.

*<a-h>*, *<home>*::
    select all characters from the cursor up to the beginning of the line.

*<a-l>*, *<end>*::
    select all characters from the cursor up to the end of the line.

*pageup, <c-b>*::
    scroll one page up.

*pagedown, <c-f>*::
    scroll one page down.

*<c-u>*::
    scroll half a page up.

*<c-d>*::
    scroll half a page down.

*;*::
    collapse selections down to the character beneath the cursor.

*<a-;>*::
    invert the direction of each selection, by placing the cursor onto the anchor.

*<a-:>*::
    make all selections have their cursor placed after their anchor.

== Changes

Yanking (copying) and pasting use the *"* register by default (see <<registers#,`:doc registers`>>).

*i*::
    enter insert mode on the left-most boundary of each selection.

*a*::
    enter insert mode after the right-most boundary of each selection.

*d*::
    yank and delete all selections.

*c*::
    yank and delete selections, then enter insert mode.

*.*::
    repeat the last modification made in insert mode (i.e. text inserted
    with *i*, *a*, or *c*).

*<a-d>*::
    delete selections without yanking them.

*<a-c>*::
    delete selections without yanking them and enter insert mode.

*I*::
    enter insert mode on the beginning of the line containing the left-most boundary of each selection.

*A*::
    enter insert mode after the end of the line containing the right-most
    boundary of each selection.

*o*::
    create a new line beneath each selection and enter insert mode.

*O*::
    create a new line above each selection and enter insert mode.

*<a-o>*::
    create a new line beneath each selection.

*<a-O>*::
    create a new line above each selection.

*y*::
    yank all selections.

*p*::
    paste after the right-most boundary of each selection.

*P*::
    paste before the left-most boundary of each selection.

*<a-p>*::
    paste after the right-most boundary of each selection and select the inserted text.

*<a-P>*::
    paste before the right-most boundary of each selection, and select the inserted text.

*R*::
    replace each selection with its corresponding item in the copy register.

*<a-R>*::
    replace each selection with the entire content of the copy register.

*r* `character`::
    replace evert character of each selection with *character*.

*<a-j>*::
    join all individual lines in each selection into the same line and
    separate them with a space character. If only a single line (or part
    of one) is selected, the following line is used for joining.

*<a-J>*::
    perform a line join, as described by *<a-j>*, and select all newly
    inserted joining space characters.

*<a-m>*::
    merge contiguous selections together.

*>*::
    indent all non-empty lines that contain each selection (see the
    *indentwidth* option in <<options#builtin-options, `:doc options
    builtin-options`>>).

*<a\->>*::
    indent all lines that contain each selection (see the *indentwidth*
    option in <<options#builtin-options, `:doc options builtin-options`>>).

*<*::
    deindent all lines that contain each selection (see the *indentwidth*
    option in <<options#builtin-options, `:doc options builtin-options`>>).

*<a-<>*::
    deindent all fully indented lines that contain each selection. For
    example, if indentation settings use 4 space characters, lines
    indented with a lesser amount won't be shifted (see the *indentwidth*
    option in <<options#builtin-options, `:doc options builtin-options`>>).

*u*::
    undo last insert mode change.

*<a-u>*::
    move backward in the undo history.

*U*::
    redo the last canceled change.

*<a-U>*::
    move forward in the undo history.

*&*::
    align the cursors of each selection vertically by inserting spaces
    before their left-most boundary.

*<a-&>*::
    _count_ index of the selection whose indentation level is to be applied +
    apply the indentation level of the main selection to all other ones.

*`*::
    convert letters in all selections to lower-case.

*~*::
    convert letters in all selections to upper-case.

*<a-`>*::
    invert the case of letters in all selections (lower-case to upper-case,
    and vice-versa).

*@*::
    _count_ amount of spaces that make up a tab +
    convert tabulation characters to space characters in all
    selections. If no _count_ is given, the *tabstop* option is used (see
    <<options#builtin-options, `:doc options builtin-options`>>).

*<a-@>*::
    _count_ amount of spaces that make up a tab +
    convert space characters to tabulation characters in all selections. If
    no _count_ is given, the *tabstop* option is used (see <<options#builtin-options,
    `:doc options builtin-options`>>).

*_*::
    un-select all whitespace characters that each selection starts and
    ends with.

*<a-)>*::
    _count_ amount to group consecutive selections by +
    rotate forward the contents of each selection with the next.

    For example, `3<a-)>` would perform a rotation within each group of
    three consecutive selections, as opposed to rotating each of all current
    selections with the next, when no count is given.

*<a-(>*::
    perform the same rotation operation described by *<a-)>*, but backwards.

== Changes through external programs

Each of the following primitives supports shell expansions
(see <<expansions#shell-expansions,`:doc expansions shell-expansions`>>).

The last command executed is stored in the *|* register (see
<<registers#,`:doc registers`>>), and is used by default when no command
is given upon executing those primitives.

*|*::
    pipe each selection to the given command and replace them with the output.

*<a-|>*::
    pipe each selection to the given command (and ignore its output).

*!*::
    insert the command's output before the left-most boundary of each
    selection.

*<a-!>*::
    insert the command's output after the right-most boundary of each
    selection.

== Searching

Searches use the */* register by default (see <<registers#,`:doc registers`>>).

*/*::
    select the matching text located after the right-most boundary of
    each selection.

*<a-/>*::
    select the matching text located before the left-most boundary of
    each selection.

*?*::
    extend each selection up to and including the matching text located after
    their right-most boundary.

*<a-?>*::
    extend each selection up to and including the matching text located before
    their left-most boundary.

*n*::
    select the matching text located after the right-most boundary of
    the main selection.

*N*::
    create an additional selection containing the matching text located
    after the right-most boundary of the main selection.

*<a-n>*::
    select the matching text located before the left-most boundary of the
    main selection.

*<a-N>*::
    create an additional selection containing the matching text located
    before the left-most boundary of the main selection.

***::
    set the search pattern to the contents of the main selection. Word
    boundaries are automatically detected, and integrated into the search
    pattern.

*<a-***>*::
    set the search pattern to the contents of the main selection.

== Goto commands

*g*, *G*::
    When a count is specified, *G* only extends the selection to the given line,
    *g* sends the anchor to the given line and a menu is then displayed which waits
    for one of the following additional keys:

    *h*:::
        go to line begin

    *l*:::
        go to line end

    *i*:::
        go to non blank line start

    *g*, *k*:::
        go to the first line

    *j*:::
        go to the last line

    *e*:::
        go to last char of last line

    *t*:::
        go to the first displayed line

    *c*:::
        go to the middle displayed line

    *b*:::
        go to the last displayed line

    *a*:::
        go to the previous (alternate) buffer

    *f*:::
        open the file whose name is selected

    *.*:::
        go to last buffer modification position

== View commands

*v*, *V*::
    *V* enters lock view mode (which will be left when the <esc> is hit),
    and *v* modifies the current view; a menu is then displayed which waits
    for one of the following additional keys:

    *v*, *c*:::
        center the main selection in the window (vertically)

    *m*:::
        center the main selection in the window (horizontally)

    *t*:::
        scroll to put the main selection on the top line of the window

    *b*:::
        scroll to put the main selection on the bottom line of the window

    *h*:::
        scroll the window count columns left

    *j*:::
        scroll the window count line downward

    *k*:::
        scroll the window count line upward

    *l*:::
        scroll the window count columns right

== Marks

The coordinates of the current selections can be saved in a register
and restored later on, with marks.

Marks use the *^* register by default (see <<registers#,`:doc registers`>>).

*Z*::
    save the coordinates of all selections.

*z*::
    restore all selections.

*<a-z>*, *<a-Z>*::
    *<a-z>* combines selections from the register with the current ones, whereas
    *<a-Z>* combines current selections with the ones in the register; a menu
    is then displayed which waits for one of the following additional keys:

    *a*:::
        append selections

    *u*:::
        keep a union of selections

    *i*:::
        keep an intersection of selections

    *<*:::
        select the selection with the leftmost cursor for each pair

    *>*:::
        select the selection with the rightmost cursor for each pair

    *+*:::
        select the longest selection

    *-*:::
        select the shortest selection

== Macros

Macros allow storing a combination of keys in the same order as they were
hit, and later easily replay them.

Macros use the *@* register by default (see <<registers#,`:doc registers`>>).

*Q*::
    start or end macro recording.

*q*::
    play a recorded macro.

*<esc>*::
    end macro recording.

== Jump list

Some commands, like the goto commands, buffer switch or search commands,
push the previous selections to the client's jump list. It is possible
to cycle through the jump list using:

*<c-i>*::
    jump forward.

*<c-o>*::
    jump backward.

*<c-s>*::
    save selections.

== Multiple selections

*s*, *S*, *<a-k>* and *<a-K>* use the */* register by default (see <<registers#,`:doc registers`>>).

*s*::
    select each matching text in all current selections.

*S*::
    split all current selections according to the matching text (used as
    a delimiter).

*<a-s>*::
    split all current selections using line boundaries for delimiter.

*<a-S>*::
    select the first and last character of each selection.

*C*::
    create an additional selection with the same dimensions as the main
    one, on the next line that can hold it.

*<a-C>*::
    create additional selection as described by *C*, but backwards.

*<space>*::
    un-select all secondary selections.

*<a-space>*::
    un-select the main selection, making the previous selection the new
    main one.

*<a-k>*::
    un-select all selections that do not contain matching text.

*<a-K>*::
    un-select all selections that contain matching text.

*$*::
    pipe each selection to the given shell command and keep the ones
    for which the shell returned 0. Shell expansions are available,
    (see <<expansions#shell-expansions,`:doc expansions shell-expansions`>>).

*)*::
    demote the main selection to a secondary one, and promote the following
    secondary selection to a primary one.

*(*::
    promote a secondary selection to a primary one as described by *)*,
    but backwards.

== Object Selection

For nestable objects, a count can be used in order to specify the depth of
the surrounding nesting level to select.

Selecting an object is a two-step operation that requires picking the
_whole_ or _inner_ targeted object, then picking the type of the object. The
following sections describe how to do both, in the same order.

Object selections are repeatable using *<a-.>*.

=== Whole object

A _whole object_ is an object *including* its surrounding delimiters.

For example, the _whole object_ associated with a quoted string is the
contents of the string itself, along with the quotes. For a regular word,
the _whole object_ will be comprised of surrounding whitespace characters,
for lack of delimiters.

*<a-a>*::
    select the whole object.

*[*::
    select from the cursor up to the beginning of the whole object.

*]*::
    select from the cursor up to the end of the whole object.

*{*::
    extend the selection from the cursor up to the beginning of the whole
    object.

*}*::
    extend the selection from the cursor up to the end of the whole object.

=== Inner object

An _inner object_ is an object *excluding* its surrounding delimiters.

For example, the _inner object_ associated with a quoted string is merely
the contents of the string itself, without any surrounding quotes.

*<a-i>*::
    select the inner object.

*<a-[>*::
    select from the cursor up to the beginning of the inner object.

*<a-]>*::
    select from the cursor up to the end of the inner object.

*<a-{>*::
    extend the selection from the cursor up to the beginning of the inner
    object.

*<a-}>*::
    extend the selection from the cursor up to the end of the inner object.

=== Objects types

After the _whole_ or _inner_ object has been chosen, its type has to
be picked and is described by one of the following:

*b*, *(*, *)*::
    select the enclosing parenthesis.

*B*, *{*, *}*::
    select the enclosing {} block.

*r*, *[*, *]*::
    select the enclosing [] block.

*a*, *<*, *>*::
    select the enclosing <> block.

*Q*, *"*::
    select the enclosing double quoted string.

*q*, *'*::
    select the enclosing single quoted string.

*g*, *`*::
    select the enclosing grave quoted string.

*w*::
    select the whole 'word'.

*<a-w>*::
    select the whole 'WORD'.

*s*::
    select the sentence.

*p*::
    select the paragraph.

*␣*::
    select whitespace characters.

*i*::
    select the current indentation block.

*n*::
    select the number.

*u*::
    select the function argument (comma separated).

*c*::
    select user defined object, will prompt for open and close text.

== Prompt commands

Upon hitting `:` in normal mode, Kakoune will prompt the user for a
command. The last executed command is stored in the *:* register (see
<<registers#,`:doc registers`>>).

During edition, a transient *clipboard* is available, it is empty when the
prompt is spawned, and is not preserved afterwards. Erased data is
automatically copied to this *clipboard*, in prompt mode.

The following keys are recognized by this mode to help with editing
(see <<commands#,`:doc commands`>>).

*<ret>*::
    validate the prompt and execute the command.

*<esc>*::
    exit the prompt.

*<left>*, *<c-b>*::
    move the cursor to the previous character.

*<right>*, *<c-f>*::
    move the cursor to the next character.

*<home>*, *<c-a>*::
    move the cursor to the first character.

*<end>*, *<c-e>*::
    move the cursor past the last character.

*<backspace>*, *<c-h>*::
    erase the character before the cursor.

*<del>*, *<c-d>*::
    erase the character under the cursor.

*<a-f>*::
    move the cursor to the beginning of the next 'word'.

*<a-F>*::
    move the cursor to the beginning of the next 'WORD'.

*<a-b>*::
    move the cursor to the beginning of the previous 'word'.

*<a-B>*::
    move the cursor to the beginning of the previous 'WORD'.

*<a-e>*::
    move the cursor to the end of the next 'word'.

*<a-E>*::
    move the cursor to the end of the next 'WORD'.

*<c-w>*::
    erase from the cursor to the begining of the previous 'word'.

*<c-W>*::
    erase from the cursor to the begining of the previous 'WORD'.

*<a-d>*::
    erase from the cursor to the end of the previous 'word'.

*<a-D>*::
    erase from the cursor to the end of the previous 'WORD'.

*<c-k>*::
    erase from the cursor to the end of the command.

*<c-u>*::
    erase from the cursor to the begin of the command.

*<c-y>*::
    insert the contents of the *clipboard* before the cursor.

*<up>*, *<c-p>*::
    select the previous command in the history.

*<down>*, *<c-n>*::
    select the next command in the history.

*<tab>*::
    select the next completion candidate.

*<s-tab>*::
    select the previous completion candidate.

*<c-r>* `register`::
    insert the contents of *register*.

*<c-v>* `key`::
    insert *key* without interpreting it.

*<c-o>*::
    toggle automatic completion.

*<a-!>*::
    expand all typed expansions in the currently entered command (see
    <<expansions#typed-expansions,`:doc expansions typed-expansions`>>).

*<a-;>*::
    escape to normal mode to allow for a single command to be executed with
    `:`.
